name: PullRequest Validation

on:
  pull_request:
    types: [labeled]

env:
  ResourceGroupName: ""
  ResourceGroupLocation: "westeurope"
  StorageAccountPrefix: "sta"

jobs:
  deploy-from--main:
    runs-on: ubuntu-latest

    if: |
      (contains(github.event.pull_request.labels.*.name, 'validate') ||
      contains(github.event.pull_request.labels.*.name, 'stage')) &&
      !contains(github.event.pull_request.labels.*.name, 'destroy')

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Set ResourceGroupName from slug/short
        run: echo "ResourceGroupName=${{ env.GITHUB_HEAD_REF_SLUG_URL }}-rg" >> $GITHUB_ENV

      - name: Checkout main branch
        uses: actions/checkout@v2
        with:
          ref: "main"

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create ResourceGroup if it does not exist
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            if $(az group exists --name ${{ env.ResourceGroupName }}) ; then
              echo "Azure resource group already exists, skipping creation..."
            else
              az group create --name ${{ env.ResourceGroupName }} --location ${{ env.ResourceGroupLocation }}
              echo "Azure resource group created"
            fi

      - name: Check file existence
        id: check_file
        uses: andstor/file-existence-action@v1
        with:
          files: "./challenges/templates/challenge_05/storage.json"

      - name: Deploy from main branch
        uses: azure/arm-deploy@v1
        if: steps.check_file.outputs.files_exists == 'true'
        with:
          resourceGroupName: ${{ env.ResourceGroupName }}
          template: "./challenges/templates/challenge_05/storage.json"
          parameters: |
            storageAccountPrefix=${{ env.StorageAccountPrefix }} 

  what-if-deployment:
    runs-on: ubuntu-latest
    needs: deploy-from--main

    if: |
      contains(github.event.pull_request.labels.*.name, 'validate') &&
      !contains(github.event.pull_request.labels.*.name, 'stage') &&
      !contains(github.event.pull_request.labels.*.name, 'destroy')

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
        
      - name: Set ResourceGroupName from slug/short
        run: echo "ResourceGroupName=${{ env.GITHUB_HEAD_REF_SLUG_URL }}-rg" >> $GITHUB_ENV

      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: What-if deployment
        shell: bash
        run: |
          CHANGES="$(az deployment group what-if -n ${{ env.GITHUB_HEAD_REF_SLUG_URL }} -g ${{ env.ResourceGroupName }}  --template-file ./challenges/templates/challenge_05/storage.json  --parameters storageAccountPrefix=${{ env.StorageAccountPrefix }})"
          HEADER="### Please validate what-if deployment:"
          STAGE="### To create a staging environment, please apply the lable 'stage' to your Pull Request."
          TEXT="$(printf "%s\n\`\`\`Text\n%s\n\`\`\`\n%s\n" "$(echo "$HEADER")" "$(echo "$CHANGES")" "$(echo "$STAGE")")"
          RESULT="$(echo "$TEXT" | sed s/\"/'\\\"'/g | sed s/\`/'\\\`'/g)"
          RESULT="${RESULT//'%'/'%25'}"
          RESULT="${RESULT//$'\n'/'%0A'}"
          RESULT="${RESULT//$'\r'/'%0D'}"
          echo "::set-output name=changes::$RESULT"
        id: what-if-deployment

      - name: Destroy resources
        shell: bash
        run: az group delete -n ${{ env.ResourceGroupName }} -y

      - uses: actions/github-script@v3
        with: 
          github-token: ${{ github.token }}
          script: |
            github.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.what-if-deployment.outputs.changes }}`
            })

  stage-deployment:
    runs-on: ubuntu-latest
    needs: deploy-from--main

    if: |
      contains(github.event.pull_request.labels.*.name, 'stage') &&
      !contains(github.event.pull_request.labels.*.name, 'destroy')

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
        
      - name: Set ResourceGroupName from slug/short
        run: echo "ResourceGroupName=${{ env.GITHUB_HEAD_REF_SLUG_URL }}-rg" >> $GITHUB_ENV

      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to staging environment
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.ResourceGroupName }}
          template: "./challenges/templates/challenge_05/storage.json"
          parameters: storageAccountPrefix=${{ env.StorageAccountPrefix }}
      
      - uses: actions/github-script@v3
        with: 
          github-token: ${{ github.token }}
          script: |
            github.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Deployed to stage environment:\nResourceGroup: ${{ env.ResourceGroupName }}\n### To destroy the stage environment apply the label 'destroy'`
            })

  destroy-stage-deployment:
    runs-on: ubuntu-latest

    if: contains(github.event.pull_request.labels.*.name, 'destroy')

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
        
      - name: Set ResourceGroupName from slug/short
        run: echo "ResourceGroupName=${{ env.GITHUB_HEAD_REF_SLUG_URL }}-rg" >> $GITHUB_ENV

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Destroy resources
        shell: bash
        run: az group delete -n ${{ env.ResourceGroupName }} -y