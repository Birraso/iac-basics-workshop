(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{359:function(t,e,s){t.exports=s.p+"assets/img/new-repository.35c7ed34.png"},360:function(t,e,s){t.exports=s.p+"assets/img/refs-tree.7f8bea2f.png"},387:function(t,e,s){"use strict";s.r(e);var a=s(45),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-basics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-basics"}},[t._v("#")]),t._v(" Git Basics")]),t._v(" "),a("p",[t._v("In this section we will provide you a brief introduction to git as well as\nsome materials for self study.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If you already have some experience using git you can jump immediately to\n"),a("a",{attrs:{href:"#helpful-resources"}},[t._v("resources section")]),t._v(" and start the "),a("em",[t._v("Learn Git Branching")]),t._v("\nexercise.")])]),t._v(" "),a("h2",{attrs:{id:"the-basics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-basics"}},[t._v("#")]),t._v(" The basics")]),t._v(" "),a("p",[t._v("You are using git for the first time or coming back to it? "),a("strong",[t._v("Start here!")])]),t._v(" "),a("h3",{attrs:{id:"settings-for-first-timers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#settings-for-first-timers"}},[t._v("#")]),t._v(" Settings for first timers")]),t._v(" "),a("p",[t._v("Git writes commit with your name and email address as metadata. Before you\nstart doing anything with it let's setup the basics.")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alex Sample"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alex@sample.com"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.editor "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"code --wait"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --list\n")])])]),a("p",[t._v("Setting the "),a("code",[t._v("core.editor")]),t._v(" tells git to use VSCode as your preferred editor\nfor commit messages. Set this if you do not know vim or configure to your own\npreference.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("--list")]),t._v(" command shows you all currently active settings. They take into\naccount your current projects settings, your "),a("em",[t._v("global")]),t._v(" user settings and your\n"),a("em",[t._v("system")]),t._v(" settings.")]),t._v(" "),a("h3",{attrs:{id:"creating-the-first-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-the-first-repository"}},[t._v("#")]),t._v(" Creating the first repository")]),t._v(" "),a("p",[t._v("Now we are ready to go. Fire up a command line window and create a new\nfolder. Then run the "),a("code",[t._v("git init")]),t._v(" command inside that folder to enable the git\nversion control for it.")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" getting-started "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" getting-started\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\nInitialized empty Git repository "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /home/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/getting-started/.git/\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch master\n\nNo commits yet\n\nnothing to commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create/copy files and use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" to track"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("The "),a("code",[t._v("git status")]),t._v(" tells you what the current state of you git repository is.\nIf there are current changes or even if you are in the middle of a\ncomplicated "),a("code",[t._v("merge")]),t._v(" or "),a("code",[t._v("rebase")]),t._v(" operation.")]),t._v(" "),a("p",[t._v("When in doubt run "),a("code",[t._v("git status")]),t._v(". It also gives you some instructions on\nwhat your next steps might be.")]),t._v(" "),a("p",[t._v("Let's create a new file and see if "),a("code",[t._v("git")]),t._v(" notices the difference:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" README.md\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to include "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        README.md\n\nnothing added to commit but untracked files present "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" to track"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("As you can see, "),a("code",[t._v("git")]),t._v(" now noticed that there is a new untracked file inside\nyou folder and suggests you to use the "),a("code",[t._v("git add")]),t._v(" command to add it the\ntracking.")]),t._v(" "),a("p",[t._v("Let's follow the that recommendation.")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git rm --cached <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        new file:   README.md\n\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The "),a("strong",[t._v(".")]),t._v(" in "),a("code",[t._v("git add .")]),t._v(" tells "),a("em",[t._v("git")]),t._v(" to track everything inside the current\nfolder.")])]),t._v(" "),a("p",[t._v("Now "),a("em",[t._v("git")]),t._v(" sees the new file and lists it under the "),a("em",[t._v("Changes to be committed")]),t._v("\nsection.")]),t._v(" "),a("p",[t._v("Let's go ahead an create our first commit.")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Create empty README.md"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root-commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 9c158cf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Create empty README.md\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" insertions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" deletions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" README.md\n\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If you omit the "),a("code",[t._v('-m "Create empty README.md"')]),t._v(" from the above command, git\nwill open your editor to enter the commit message. The "),a("code",[t._v("commit")]),t._v(" command will\nwait for you to save and close the editor window.")])]),t._v(" "),a("p",[t._v("The "),a("em",[t._v("de facto standard")]),t._v(" is to have a "),a("code",[t._v("README.md")]),t._v(" markdown file on the root\nfolder of your project to provide basic information and setup instruction for\nyour project.")]),t._v(" "),a("div",{staticClass:"language-markdown extra-class"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[a("span",{pre:!0,attrs:{class:"token title important"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" Getting started with git")]),t._v("\n\nIt's easy if you take one step at a time.\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch master\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git restore <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        modified:   README.md\n\nno changes added to commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" and/or "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit -a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -a -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Add a heading and some text"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2985691")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Add a heading and some text\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" insertions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Let's extend our current "),a("code",[t._v("README.md")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-markdown extra-class"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[a("span",{pre:!0,attrs:{class:"token title important"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" Getting started with git")]),t._v("\n\nGit might look intimidating to begin with...\n\n"),a("span",{pre:!0,attrs:{class:"token title important"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("##")]),t._v(" How hard is it?")]),t._v("\n\nIt's easy if you take one step at a time.\n")])])]),a("p",[t._v("Also let's add a "),a("code",[t._v(".gitignore")]),t._v(" file to ignore files that we don't want to track.")]),t._v(" "),a("div",{staticClass:"language-gitignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gitignore"}},[a("code",[a("span",{pre:!0,attrs:{class:"token entry string"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(".bak")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token entry string"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("~")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Always use a "),a("code",[t._v(".gitignore")]),t._v(" file in you projects. Since git tracks every file\nin the workspace by default you will almost always have files you want to "),a("em",[t._v("ignore")]),t._v(".")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("node_modules/")]),t._v(" module dependencies that take a lot of space and can be\ninstalled using lifecycle management")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("tmp")]),t._v(" any kind of temporary files and build outputs")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".vscode/")]),t._v(" sometimes exclude editor-files and personal configuration")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".secrets.env")]),t._v(" exclude files that may contain secrets")])])])]),t._v(" "),a("p",[t._v("Let's check the outputs of "),a("code",[t._v("git status")]),t._v(" and inspect the changes to the files in\nmore detail.")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch master\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git restore <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        modified:   README.md\n\nUntracked files:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to include "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        .gitignore\n\nno changes added to commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" and/or "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit -a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("As you can see "),a("em",[t._v("git")]),t._v(" noticed that we have changed the "),a("code",[t._v("README.md")]),t._v(" and have a\nnew file named "),a("code",[t._v(".gitignore")]),t._v(" in our current working directory.")]),t._v(" "),a("p",[t._v("Let's check in detail what changes it detects on the "),a("code",[t._v("README.md")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n")])])]),a("p",[t._v("You should see some output like this:")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("diff --git a/README.md b/README.md\nindex cebce42..456c986 100644\n"),a("span",{pre:!0,attrs:{class:"token deleted"}},[t._v("--- a/README.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[t._v("+++ b/README.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token coord"}},[t._v("@@ -1,3 +1,7 @@")]),t._v("\n # Getting started with git\n\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[t._v("+Git might look intimidating to begin with...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[t._v("+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[t._v("+## How hard is it?")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[t._v("+")]),t._v("\n It's easy if you take one step at a time.\n(END)\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("You can close the diff viewer by pressing "),a("code",[t._v("Q")]),t._v(".")])]),t._v(" "),a("p",[t._v("Note that git "),a("em",[t._v("inserted")]),t._v(" the new lines between the first ones and remember\nthe initial lines stay the same.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v(".gitignore")]),t._v(" files is not shown here. Changes to it are not tracked yet.")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -am "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Add more content to README and ignore temporary files"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master 0a92cb8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Add "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" content to README and ignore temporary files\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" insertions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Now you have created your first commits let's see how we can share them with\nyour colleagues.")]),t._v(" "),a("p",[t._v("First create a new repository on GitHub:")]),t._v(" "),a("p",[a("img",{attrs:{src:s(359),alt:"new repository"}})]),t._v(" "),a("p",[t._v("Then you can follow the instructions for connecting your local repository.")]),t._v(" "),a("h2",{attrs:{id:"helpful-resources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#helpful-resources"}},[t._v("#")]),t._v(" Helpful resources")]),t._v(" "),a("p",[t._v("If you feel underwhelmed with the content of this intro, check out "),a("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn Git\nBranching"),a("OutboundLink")],1),t._v(" and see if you can master the\nlater "),a("em",[t._v("levels")]),t._v(" of the tutorial. You should already know you way around git to\nget the most out of it.")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/learn/paths/intro-to-vc-git/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introduction to version control in Git (~3\nhours)"),a("OutboundLink")],1),t._v(" Our\nfirst exercise here covers about the first hour of the course.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn Git Branching"),a("OutboundLink")],1),t._v(" "),a("em",[t._v("a visual and\ninteractive tutorial.")]),t._v(" Once you have the basics, play through all the levels\nand try not to exceed the number of commands for each exercise.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pro Git"),a("OutboundLink")],1),t._v(" "),a("em",[t._v("by Scott Chacon and Ben Straub")])])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.toptal.com/developers/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitignore.io"),a("OutboundLink")],1),t._v(" "),a("em",[t._v("generate\n"),a("code",[t._v(".gitignore")]),t._v(" files for your projects.")]),t._v(" Use this for new projects or when\ncreating a git repository out of existing ones.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://guides.github.com/features/mastering-markdown/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mastering\nMarkdown"),a("OutboundLink")],1),t._v(" a quick\nintro to GitHub Flavoured Markdown")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://github.github.com/gfm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Flavored Markdown"),a("OutboundLink")],1),t._v(" the complete\nspecification.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://training.github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Cheat Sheets"),a("OutboundLink")],1),t._v(" "),a("em",[t._v("Reference sheets in\ndifferent languages.")])])])]),t._v(" "),a("h2",{attrs:{id:"how-to-create-a-sample-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-create-a-sample-tree"}},[t._v("#")]),t._v(" How to create a sample tree")]),t._v(" "),a("p",[t._v("This is an optional task to create a sample object graph in git and later\nexploring it using the "),a("code",[t._v("git cat-file")]),t._v(" command.")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" git-basics\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" git-basics\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\nInitialized empty Git repository "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /home/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/git-basics/.git/\n\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version 1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" test.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" test.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first commit"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root-commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" fdf4fc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" first commit\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" insertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" test.txt\n\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new file"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" new.txt\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version 2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" test.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" new.txt test.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"second commit"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master cac0ca"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" second commit\n Date: Thu Apr "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":50:56 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v(" +0200\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" files changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" insertions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" deletion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" new.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" bak\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version 1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bak/test.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"third commit"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master 1a410e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" third commit\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" insertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" bak/test.txt\n")])])]),a("p",[a("img",{attrs:{src:s(360),alt:"refs-tree"}})]),t._v(" "),a("p",[t._v("Now you can start browsing the tree structure like this:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cat-file -p master\ntree 3c4e9cd789d88d8d89c1073707c3585e41b0e614\nparent 324177edbf6d0ae3f12d657302f2627d6347c2c6\nauthor Clemens Wältken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("clemens.waltken@microsoft.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1617876347")]),t._v(" +0200\ncommitter Clemens Wältken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("clemens.waltken@microsoft.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1617876347")]),t._v(" +0200\n\nthird commit\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cat-file -p 3c4e9c\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);